//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace WebApiOpenApiClient.hipri
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.2))")]
    public interface IController
    {
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApproverInfo>> ApproversAsync(ApproversQry body);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentAuthorization>> DeploymentAuthorizationAllAsync(System.Guid? serviceId, string requestorEmail, System.Collections.Generic.IEnumerable<System.Guid> subscriptionIds, System.Collections.Generic.IEnumerable<ExceptionRequestStatus> statuses, System.DateTimeOffset? requestedStartFrom, System.DateTimeOffset? requestedUpTo);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<DeploymentAuthorization> DeploymentAuthorizationAsync(Deployment body);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<DeploymentAuthorization> DeploymentAuthorization2Async(System.Guid id);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventsInPlace>> EventsRetrievalAsync(EventsQuery body);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExceptionRequest>> ExceptionRequestAllAsync(System.Collections.Generic.IEnumerable<System.Guid> serviceIds, string approverEmail, string requestorEmail, System.Collections.Generic.IEnumerable<System.Guid> subscriptionIds, System.Collections.Generic.IEnumerable<ExceptionRequestStatus> statuses, System.DateTimeOffset? requestedStartFrom, System.DateTimeOffset? requestedUpTo);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<ExceptionRequest> ExceptionRequestAsync(System.Guid exceptionRequestId);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task ExceptionRequest2Async(System.Guid exceptionRequestId, ExceptionRequest body);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task FromdeclinedAsync(DeploymentAuthorization body);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task PreapprovalAsync(ExceptionRequestBody body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.ApiController
    {
        private IController _implementation;
    
        public Controller(IController implementation)
        {
            _implementation = implementation;
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Approvers")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApproverInfo>> Approvers([Microsoft.AspNetCore.Mvc.FromBody] ApproversQry body)
        {
            return _implementation.ApproversAsync(body);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("DeploymentAuthorization")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentAuthorization>> DeploymentAuthorizationAll([Microsoft.AspNetCore.Mvc.FromQuery] System.Guid? serviceId, [Microsoft.AspNetCore.Mvc.FromQuery] string requestorEmail, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<System.Guid> subscriptionIds, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<ExceptionRequestStatus> statuses, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? requestedStartFrom, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? requestedUpTo)
        {
            return _implementation.DeploymentAuthorizationAllAsync(serviceId, requestorEmail, subscriptionIds, statuses, requestedStartFrom, requestedUpTo);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("DeploymentAuthorization")]
        public System.Threading.Tasks.Task<DeploymentAuthorization> DeploymentAuthorization([Microsoft.AspNetCore.Mvc.FromBody] Deployment body)
        {
            return _implementation.DeploymentAuthorizationAsync(body);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("DeploymentAuthorization/{id}")]
        public System.Threading.Tasks.Task<DeploymentAuthorization> DeploymentAuthorization2(System.Guid id)
        {
            return _implementation.DeploymentAuthorization2Async(id);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("EventsRetrieval")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventsInPlace>> EventsRetrieval([Microsoft.AspNetCore.Mvc.FromBody] EventsQuery body)
        {
            return _implementation.EventsRetrievalAsync(body);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("ExceptionRequest")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExceptionRequest>> ExceptionRequestAll([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<System.Guid> serviceIds, [Microsoft.AspNetCore.Mvc.FromQuery] string approverEmail, [Microsoft.AspNetCore.Mvc.FromQuery] string requestorEmail, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<System.Guid> subscriptionIds, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<ExceptionRequestStatus> statuses, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? requestedStartFrom, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? requestedUpTo)
        {
            return _implementation.ExceptionRequestAllAsync(serviceIds, approverEmail, requestorEmail, subscriptionIds, statuses, requestedStartFrom, requestedUpTo);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("ExceptionRequest/{exceptionRequestId}")]
        public System.Threading.Tasks.Task<ExceptionRequest> ExceptionRequest(System.Guid exceptionRequestId)
        {
            return _implementation.ExceptionRequestAsync(exceptionRequestId);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("ExceptionRequest/{exceptionRequestId}")]
        public System.Threading.Tasks.Task ExceptionRequest2(System.Guid exceptionRequestId, [Microsoft.AspNetCore.Mvc.FromBody] ExceptionRequest body)
        {
            return _implementation.ExceptionRequest2Async(exceptionRequestId, body);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("ExceptionRequest/ExceptionRequest/fromdeclined")]
        public System.Threading.Tasks.Task Fromdeclined([Microsoft.AspNetCore.Mvc.FromBody] DeploymentAuthorization body)
        {
            return _implementation.FromdeclinedAsync(body);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("ExceptionRequest/ExceptionRequest/preapproval")]
        public System.Threading.Tasks.Task Preapproval([Microsoft.AspNetCore.Mvc.FromBody] ExceptionRequestBody body)
        {
            return _implementation.PreapprovalAsync(body);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApproversQry 
    {
        [Newtonsoft.Json.JsonProperty("services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> Services { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApproverInfo 
    {
        [Newtonsoft.Json.JsonProperty("approverId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ApproverId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApproverName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approverEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApproverEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> ServiceIds { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ExceptionRequestStatus
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RegionApproval 
    {
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventsInPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> EventsInPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentApproved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DeploymentApproved { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SubscriptionApproval 
    {
        [Newtonsoft.Json.JsonProperty("subscriptionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid SubscriptionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventsInPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> EventsInPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentApprovedForEntireSubscription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DeploymentApprovedForEntireSubscription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RegionApproval> Regions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exceptionRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> ExceptionRequests { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DeploymentAuthorization 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("authorizationRequestDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AuthorizationRequestDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid DeploymentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Requestor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentEstimatedStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeploymentEstimatedStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentEstimatedEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeploymentEstimatedEnd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ServiceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubscriptionApproval> Subscriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExceptionRequestStatus Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Subscription 
    {
        [Newtonsoft.Json.JsonProperty("subscriptionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid SubscriptionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Regions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Deployment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Requestor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentEstimatedStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeploymentEstimatedStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deploymentEstimatedEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeploymentEstimatedEnd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ServiceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Subscription> Subscriptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventsQuery 
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Regions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class RegionEvents 
    {
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }
    
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Events { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventsInPlace 
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventsPerRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RegionEvents> EventsPerRegion { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StatusChange 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExceptionRequestStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ChangeDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ApproverNotes 
    {
        [Newtonsoft.Json.JsonProperty("approverId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ApproverId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ExceptionRequest 
    {
        [Newtonsoft.Json.JsonProperty("exceptionRequestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ExceptionRequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RequestDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessJustification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessJustification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deployment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeploymentAuthorization Deployment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExceptionRequestStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approverId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ApproverId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApproverName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approverEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApproverEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("formerApproverIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> FormerApproverIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("changeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StatusChange> ChangeStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approversNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApproverNotes> ApproversNotes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ExceptionRequestBody 
    {
        [Newtonsoft.Json.JsonProperty("requestorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deployment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Deployment Deployment { get; set; }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108